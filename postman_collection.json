{
	"info": {
		"_postman_id": "c7a8b6e2-d3f4-4e5a-8b9c-1d2e3f4a5b6c",
		"name": "Todo App API V2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login Scenarios",
			"item": [
				{
					"name": "Successful Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Login successful\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user\",\n    \"password\": \"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"login"
							]
						},
						"description": "Log in to create a session. Postman will store the cookie for subsequent requests."
					},
					"response": []
				},
				{
					"name": "Failed Login (Wrong Password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user\",\n    \"password\": \"wrongpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"login"
							]
						},
						"description": "Attempts to log in with incorrect credentials to verify the error response."
					},
					"response": []
				}
			],
			"description": "Requests to test user authentication."
		},
		{
			"name": "Task Management",
			"item": [
				{
					"name": "Get All Tasks",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/api/tasks",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "Requires a valid session from logging in."
					},
					"response": []
				},
				{
					"name": "Add Task",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Test task from Postman\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/tasks",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "Adds a new task for the logged-in user."
					},
					"response": []
				},
				{
					"name": "Mark Task as Complete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Task is marked as completed\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.completed).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Walk the dog\",\n    \"completed\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/tasks/:taskId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"tasks",
								":taskId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "2",
									"description": "Replace with a real task ID from 'Get All Tasks'"
								}
							]
						},
						"description": "Marks an existing task as complete. IMPORTANT: The `text` field must match the existing task's text, or it will be overwritten."
					},
					"response": []
				},
				{
					"name": "Edit Task Text",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"This task has been updated!\",\n    \"completed\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/tasks/:taskId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"tasks",
								":taskId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "1",
									"description": "Replace with a real task ID from 'Get All Tasks'"
								}
							]
						},
						"description": "Update the text or completion status of a task."
					},
					"response": []
				},
				{
					"name": "Remove Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 No Content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/api/tasks/:taskId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"tasks",
								":taskId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "1",
									"description": "Replace with a real task ID from 'Get All Tasks'"
								}
							]
						},
						"description": "Deletes a specific task."
					},
					"response": []
				}
			],
			"description": "Requests for creating and managing tasks."
		}
	]
}